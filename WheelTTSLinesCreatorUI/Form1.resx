<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="logTextBox.Text" xml:space="preserve">
    <value>To use this program, browse for the game's directory and save it in the game directory text box (Example: C:\Program Files (x86)\Steam\steamapps\common\The Jackbox Party Pack 8). Set the text-to-speech voice using the dropdown menu on the right. Use the test button to make sure it works. Select any number of tasks on the right to set the program to generate audio files for the specific question types selected. Once ready, click the start button to start creating the audio files. Press the cancel button to abort the process. To generate audio files for the game's miscellaneous and bank file lines, browse for the text files included and save them in the respective text boxes before running the program.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2P//ANj//wDY//8A2P//AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADY//8A2P//AL7//wC+//8Avv//AL7//wDY//8A2P//AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADY//8Avv//AL7//wCu//8Aj///AI///wCu//8Avv//AL7//wDY
        //8AAAAAAAAAAAAAAAAAAAAAAAAAAADY//8Avv//AK7//wCP//8Arv//AK7//wCP//8Arv//AI///wCu
        //8Avv//ANj//wAAAAAAAAAAAAAAAADY//8Avv//AI///wCu//8Arv//AK7//wCu//8Arv//AK7//wCu
        //8Arv//AI///wC+//8A2P//AAAAAAAAAAAA2P//AL7//wCP//8Aj///AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AI///wCP//8Avv//ANj//wAAAAAA2P//AL7//wCu//8Arv//AAAA////////////////////
        /////////////wAAAP8Arv//AK7//wC+//8A2P//ANj//wC+//8Aj///AK7//wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AI///wCP//8Avv//ANj//wDY//8Avv//AI///wCP//8AAAD/AK7//wCu
        //8Arv//AK7//wCu//8Arv//AAAA/wCu//8Aj///AL7//wDY//8A2P//AL7//wCu//8Arv//AK7//wCu
        //8AAAD/AK7//wCu//8AAAD/AK7//wCu//8Arv//AK7//wC+//8A2P//AAAAAADY//8Avv//AI///wAA
        AP8AAAD/AK7//wCu//8Arv//AK7//wAAAP8AAAD/AI///wC+//8A2P//AAAAAAAAAAAA2P//AL7//wCP
        //8Arv//AK7//wCu//8Arv//AK7//wCu//8Arv//AK7//wCP//8Avv//ANj//wAAAAAAAAAAAAAAAADY
        //8Avv//AK7//wCP//8Arv//AK7//wCP//8Arv//AI///wCu//8Avv//ANj//wAAAAAAAAAAAAAAAAAA
        AAAAAAAAANj//wC+//8Avv//AK7//wCP//8Aj///AK7//wC+//8Avv//ANj//wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAA2P//ANj//wC+//8Avv//AL7//wC+//8A2P//ANj//wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2P//ANj//wDY//8A2P//AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/D8AAPAPAADgBwAAwAMAAIABAACAAQAAAAAAAAAAAAAAAAAAAAAAAIABAACAAQAAwAMAAOAH
        AADwDwAA/D8AAA==
</value>
  </data>
</root>